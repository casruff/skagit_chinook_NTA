idx <- as.integer(sub("(^.*\\[)([0-9]{1,3})(.*)","\\2",names(bad_Rhat)))
## data frame of offenders
(df <- data.frame(par=par_names, index=idx))
## ----tbl_summary_stats---------------------------------------------------
tbl_smry <- mod_fit$BUGSoutput$summary[c("alpha","E_Rkr_a","beta"),
c("mean","sd","2.5%","50%","97.5%")]
print(tbl_smry,digits=3,quote=FALSE,justify="right")
CI_vec <- c(0.025,0.5,0.975)
offSet <- 0.06
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## ----set_options, echo=FALSE, message=FALSE------------------------------
options(width = 100)
knitr::opts_chunk$set(message = FALSE)
set.seed(2017)
if(file.exists("cnt_time.txt")) {
file.remove("cnt_time.txt")
}
## ----load_pkgs, message=FALSE, warning=FALSE-----------------------------
if(!require("R2jags")) {
install.packages("R2jags")
library("R2jags")
}
if(!require("readr")) {
install.packages("readr")
library("readr")
}
if(!require("RCurl")) {
install.packages("RCurl")
library("RCurl")
}
if(!require("gsl")) {
install.packages("gsl")
library("gsl")
}
if(!require("loo")) {
install.packages("loo")
library("loo")
}
if(!require("here")) {
install.packages("here")
library("here")
}
## ----define_Re2prec------------------------------------------------------
## better round
Re2prec <- function(x,map="round",prec=1) {
## 'map' can be round, floor, or ceiling
## 'prec' is nearest value (eg, 0.1 means to nearest tenth); default 1 gives normal behavior
if(prec<=0) {stop("\"prec\" cannot be less than or equal to 0") }
do.call(map,list(x/prec))*prec
}
## colVars; from Gelman
## returns the column-wise variance of a matrix
colVars <- function(a) {
n <- dim(a)[[1]]
c <- dim(a)[[2]]
mm <- matrix(.colMeans(a, n, c), n, c, byrow = TRUE)
return(.colMeans(((a - mm) ^ 2), n, c) * n / (n - 1))
}
## waic; from Gelman
## computes WAIC based on pointwise log-like
waic <- function(log_lik) {
S <- nrow(log_lik)
n <- ncol(log_lik)
lpd <- log(colMeans(exp(log_lik)))
p_waic <- colVars(log_lik)
elpd_waic <- lpd - p_waic
waic <- -2*elpd_waic
loo_weights_raw <- 1/exp(log_lik-max(log_lik))
loo_weights_normalized <- loo_weights_raw /
matrix(colMeans(loo_weights_raw),nrow=S,ncol=n,byrow=TRUE)
loo_weights_regularized <- pmin(loo_weights_normalized, sqrt(S))
elpd_loo <- log(colMeans(exp(log_lik)*loo_weights_regularized) /
colMeans(loo_weights_regularized))
p_loo <- lpd - elpd_loo
pointwise <- cbind(waic,lpd,p_waic,elpd_waic,p_loo,elpd_loo)
total <- colSums(pointwise)
se <- sqrt(n*colVars(pointwise))
return(list(waic=total["waic"],
elpd_waic=total["elpd_waic"],
p_waic=total["p_waic"],
elpd_loo=total["elpd_loo"],
p_loo=total["p_loo"],
pointwise=pointwise,
total=total,
se=se))
}
## ----get_user_inputs-----------------------------------------------------
## 1. file with escapement data
## [n_yrs x 2] matrix of obs counts; 1st col is calendar yr
fn_esc <- "SkagitSFCKEsc.csv"
## 2. file with age comp data
## [n_yrs x (1+A)]; 1st col is calendar yr
fn_age <- "SkagitSFCKAge.csv"
## min & max ages
age_min <- 2
age_max <- 5
## years, if any, of age-comp to skip; see below
age_skip <- 0
## 3. file with harvest data
## [n_yrs x 2] matrix of obs catch; 1st col is calendar yr
fn_harv <- "SkagitSFCKCatch.csv"
## upper threshold for Gelman & Rubin's (1992) potential scale reduction factor (Rhat).
Rhat_thresh <- 1.1
## URL for example data files
## set to NULL if using a local folder/directory
ex_url <- "https://raw.githubusercontent.com/casruff/Skagit-Chinook-run-reconstruction/master/"
## ----get_escapement_data-------------------------------------------------
dat_yrs <- seq(1992,2014,1)
## escapement
dat_esc <- read.csv(text = getURL(paste0(ex_url,fn_esc)))
dat_esc <- dat_esc[which(dat_esc$year %in% dat_yrs),]
## number of years of data
n_yrs <- length(dat_yrs)
## get first & last years
yr_frst <- min(dat_yrs)
yr_last <- max(dat_yrs)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of recruits
rDat <- exp(apply(mod_fit$BUGSoutput$sims.list$tot_ln_Rec,2,quantile,CI_vec))
data.frame(rDat)
t(rDat)
sDat
t(sDat)
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of recruits
rDat <- exp(apply(mod_fit$BUGSoutput$sims.list$tot_ln_Rec,2,quantile,CI_vec))
## median values for a & b
aa <- apply(mod_fit$BUGSoutput$sims.list$mu_Rkr_a,1,median)
bb <- mod_fit$BUGSoutput$sims.list$beta
# aa <- median(mod_fit$BUGSoutput$sims.list$alpha)
## empty plot space for spawner-recruit relationships
dd <- 3000
yM <- Re2prec(max(rDat),"ceiling",dd)
#yM <- 30000
xM <- Re2prec(max(sDat),"ceiling",dd)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0,0,0))
plot(sDat[2,],rDat[2,], xlim=c(0,xM), ylim=c(0,yM), pch=16, col="blue3", type="n",
xaxs="i", yaxs="i", ylab="Recruits (1000s)", xlab="Spawners (1000s)", cex.lab=1.2,
xaxt="n", yaxt="n")
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat
n_yrs-age_min
age_min
dat_yrs <- seq(1983,2014,1)
## escapement
dat_esc <- read.csv(text = getURL(paste0(ex_url,fn_esc)))
dat_esc <- dat_esc[which(dat_esc$year %in% dat_yrs),]
## number of years of data
n_yrs <- length(dat_yrs)
dat_yrs <- seq(1983,2014,1)
## escapement
dat_esc <- read.csv(text = getURL(paste0(ex_url,fn_esc)))
dat_esc <- dat_esc[which(dat_esc$year %in% dat_yrs),]
## number of years of data
n_yrs <- length(dat_yrs)
## get first & last years
yr_frst <- min(dat_yrs)
yr_last <- max(dat_yrs)
## log of escapement
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of recruits
rDat <- exp(apply(mod_fit$BUGSoutput$sims.list$tot_ln_Rec,2,quantile,CI_vec))
## median values for a & b
aa <- apply(mod_fit$BUGSoutput$sims.list$mu_Rkr_a,1,median)
bb <- mod_fit$BUGSoutput$sims.list$beta
# aa <- median(mod_fit$BUGSoutput$sims.list$alpha)
## empty plot space for spawner-recruit relationships
dd <- 3000
yM <- Re2prec(max(rDat),"ceiling",dd)
#yM <- 30000
xM <- Re2prec(max(sDat),"ceiling",dd)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0,0,0))
plot(sDat[2,],rDat[2,], xlim=c(0,xM), ylim=c(0,yM), pch=16, col="blue3", type="n",
xaxs="i", yaxs="i", ylab="Recruits (1000s)", xlab="Spawners (1000s)", cex.lab=1.2,
xaxt="n", yaxt="n")
sDat
rDat
## ----get_escapement_data-------------------------------------------------
dat_yrs <- seq(1983,2016,1)
## escapement
dat_esc <- read.csv(text = getURL(paste0(ex_url,fn_esc)))
dat_esc <- dat_esc[which(dat_esc$year %in% dat_yrs),]
## number of years of data
n_yrs <- length(dat_yrs)
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of recruits
rDat <- exp(apply(mod_fit$BUGSoutput$sims.list$tot_ln_Rec,2,quantile,CI_vec))
## median values for a & b
aa <- apply(mod_fit$BUGSoutput$sims.list$mu_Rkr_a,1,median)
bb <- mod_fit$BUGSoutput$sims.list$beta
# aa <- median(mod_fit$BUGSoutput$sims.list$alpha)
## empty plot space for spawner-recruit relationships
dd <- 3000
yM <- Re2prec(max(rDat),"ceiling",dd)
#yM <- 30000
xM <- Re2prec(max(sDat),"ceiling",dd)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0,0,0))
plot(sDat[2,],rDat[2,], xlim=c(0,xM), ylim=c(0,yM), pch=16, col="blue3", type="n",
xaxs="i", yaxs="i", ylab="Recruits (1000s)", xlab="Spawners (1000s)", cex.lab=1.2,
xaxt="n", yaxt="n")
sDat
t(sDat)
## load model fits
## load model fits
savedir <- here("Skagit_Chinook_Ricker_SR_SSM_SPCK_cache/latex")
lazyLoad(sub(".rdb","",grep("^JAGS_IO.*.rdb",savedir,value=TRUE)))
## load model fits
## load model fits
## load saved workspace
orig_dir <- getwd()
orig_dir
setwd("~/Projects/Chinook SR modelling")
## load model fits
## load model fits
## load saved workspace
orig_dir <- getwd()
work_dir <- "Skagit_Chinook_Ricker_SR_SSM_SFCK_cache/latex"
setwd(paste0(orig_dir,"/",work_dir))
lazyLoad(sub(".rdb","",grep("^JAGS_IO.*.rdb",dir(),value=TRUE)))
library("R2jags")
attach.jags(mod_fit)
## Rhat values for all parameters
rh <- mod_fit$BUGSoutput$summary[,"Rhat"]
## histogram of Rhat values for all parameters
par(mai=c(0.9,0.9,0.3,0.1))
hist(rh, breaks=seq(1,ceiling(max(rh)/0.01)*0.01,by=0.0001),main="",
col=rgb(0,0,255,alpha=50,maxColorValue=255),border="blue3",xlab=expression(italic(R[hat])))
## Rhat values > threshold
bad_Rhat <- rh[rh>Rhat_thresh]
## prop of params with Rhat > threshold
round(length(bad_Rhat)/length(rh),3)
## param names
par_names <- sub("\\[.*","",names(bad_Rhat))
## number of Rhat > threshold by param name
table(par_names)
## ----tbl_summary_stats---------------------------------------------------
tbl_smry <- mod_fit$BUGSoutput$summary[c("alpha","E_Rkr_a","beta"),
c("mean","sd","2.5%","50%","97.5%")]
print(tbl_smry,digits=3,quote=FALSE,justify="right")
attach.jags(mod_fit)
## Rhat values for all parameters
rh <- mod_fit$BUGSoutput$summary[,"Rhat"]
## histogram of Rhat values for all parameters
par(mai=c(0.9,0.9,0.3,0.1))
hist(rh, breaks=seq(1,ceiling(max(rh)/0.01)*0.01,by=0.0001),main="",
col=rgb(0,0,255,alpha=50,maxColorValue=255),border="blue3",xlab=expression(italic(R[hat])))
work_dir <- "Skagit_Chinook_Ricker_SR_SSM_SPCK_cache/latex"
setwd(paste0(orig_dir,"/",work_dir))
lazyLoad(sub(".rdb","",grep("^JAGS_IO.*.rdb",dir(),value=TRUE)))
library("R2jags")
attach.jags(mod_fit)
work_dir
getwd()
attach.jags(mod_fit)
## histogram of Rhat values for all parameters
par(mai=c(0.9,0.9,0.3,0.1))
hist(rh, breaks=seq(1,ceiling(max(rh)/0.01)*0.01,by=0.0001),main="",
col=rgb(0,0,255,alpha=50,maxColorValue=255),border="blue3",xlab=expression(italic(R[hat])))
## ----model_diagnostics---------------------------------------------------
mod_fit <- best_fit
setwd("~/Projects/Chinook SR modelling")
## load model fits
## load model fits
## load saved workspace
orig_dir <- getwd()
work_dir <- "Skagit_Chinook_Ricker_SR_SSM_SPCK_cache/latex"
setwd(paste0(orig_dir,"/",work_dir))
lazyLoad(sub(".rdb","",grep("^JAGS_IO.*.rdb",dir(),value=TRUE)))
library("R2jags")
attach.jags(mod_fit)
## ----model_diagnostics---------------------------------------------------
mod_fit <- best_fit
## Rhat values for all parameters
rh <- mod_fit$BUGSoutput$summary[,"Rhat"]
## histogram of Rhat values for all parameters
par(mai=c(0.9,0.9,0.3,0.1))
hist(rh, breaks=seq(1,ceiling(max(rh)/0.01)*0.01,by=0.0001),main="",
col=rgb(0,0,255,alpha=50,maxColorValue=255),border="blue3",xlab=expression(italic(R[hat])))
## ----tbl_summary_stats---------------------------------------------------
tbl_smry <- mod_fit$BUGSoutput$summary[c("alpha","E_Rkr_a","beta"),
c("mean","sd","2.5%","50%","97.5%")]
print(tbl_smry,digits=3,quote=FALSE,justify="right")
dat_yrs <- seq(1986,2016,1)
## number of years of data
n_yrs <- length(dat_yrs)
## get first & last years
yr_frst <- min(dat_yrs)
yr_last <- max(dat_yrs)
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
CI_vec <- c(0.025,0.5,0.975)
offSet <- 0.06
MC <- 100
set.seed(123)
idx <- sample(seq(mcmc_samp),MC)
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## min & max ages
age_min <- 2
age_max <- 5
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of recruits
rDat <- exp(apply(mod_fit$BUGSoutput$sims.list$tot_ln_Rec,2,quantile,CI_vec))
## median values for a & b
aa <- apply(mod_fit$BUGSoutput$sims.list$mu_Rkr_a,1,median)
bb <- mod_fit$BUGSoutput$sims.list$beta
# aa <- median(mod_fit$BUGSoutput$sims.list$alpha)
## empty plot space for spawner-recruit relationships
dd <- 500
yM <- Re2prec(max(rDat),"ceiling",dd)
#yM <- 30000
xM <- Re2prec(max(sDat),"ceiling",dd)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0,0,0))
plot(sDat[2,],rDat[2,], xlim=c(0,xM), ylim=c(0,yM), pch=16, col="blue3", type="n",
xaxs="i", yaxs="i", ylab="Recruits (1000s)", xlab="Spawners (1000s)", cex.lab=1.2,
xaxt="n", yaxt="n")
## ----set_options, echo=FALSE, message=FALSE------------------------------
options(width = 100)
knitr::opts_chunk$set(message = FALSE)
set.seed(2017)
if(file.exists("cnt_time.txt")) {
file.remove("cnt_time.txt")
}
## ----load_pkgs, message=FALSE, warning=FALSE-----------------------------
if(!require("R2jags")) {
install.packages("R2jags")
library("R2jags")
}
if(!require("readr")) {
install.packages("readr")
library("readr")
}
if(!require("RCurl")) {
install.packages("RCurl")
library("RCurl")
}
if(!require("gsl")) {
install.packages("gsl")
library("gsl")
}
if(!require("loo")) {
install.packages("loo")
library("loo")
}
## ----define_Re2prec------------------------------------------------------
## better round
Re2prec <- function(x,map="round",prec=1) {
## 'map' can be round, floor, or ceiling
## 'prec' is nearest value (eg, 0.1 means to nearest tenth); default 1 gives normal behavior
if(prec<=0) { stop("\"prec\" cannot be less than or equal to 0") }
do.call(map,list(x/prec))*prec
}
## posterior of spawners
sDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
sDat <- sDat[,1:(n_yrs-age_min)]
## posterior of recruits
rDat <- exp(apply(mod_fit$BUGSoutput$sims.list$tot_ln_Rec,2,quantile,CI_vec))
## median values for a & b
aa <- apply(mod_fit$BUGSoutput$sims.list$mu_Rkr_a,1,median)
bb <- mod_fit$BUGSoutput$sims.list$beta
# aa <- median(mod_fit$BUGSoutput$sims.list$alpha)
## empty plot space for spawner-recruit relationships
dd <- 500
yM <- Re2prec(max(rDat),"ceiling",dd)
#yM <- 30000
xM <- Re2prec(max(sDat),"ceiling",dd)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0,0,0))
plot(sDat[2,],rDat[2,], xlim=c(0,xM), ylim=c(0,yM), pch=16, col="blue3", type="n",
xaxs="i", yaxs="i", ylab="Recruits (1000s)", xlab="Spawners (1000s)", cex.lab=1.2,
xaxt="n", yaxt="n")
t(sDat)
t(rDat)
## ----set_options, echo=FALSE, message=FALSE------------------------------
options(width = 100)
knitr::opts_chunk$set(message = FALSE)
set.seed(2017)
if(file.exists("cnt_time.txt")) {
file.remove("cnt_time.txt")
}
## ----load_pkgs, message=FALSE, warning=FALSE-----------------------------
if(!require("R2jags")) {
install.packages("R2jags")
library("R2jags")
}
if(!require("readr")) {
install.packages("readr")
library("readr")
}
if(!require("RCurl")) {
install.packages("RCurl")
library("RCurl")
}
if(!require("gsl")) {
install.packages("gsl")
library("gsl")
}
if(!require("loo")) {
install.packages("loo")
library("loo")
}
## ----define_Re2prec------------------------------------------------------
## better round
Re2prec <- function(x,map="round",prec=1) {
## 'map' can be round, floor, or ceiling
## 'prec' is nearest value (eg, 0.1 means to nearest tenth); default 1 gives normal behavior
if(prec<=0) { stop("\"prec\" cannot be less than or equal to 0") }
do.call(map,list(x/prec))*prec
}
## colVars; from Gelman
## returns the column-wise variance of a matrix
colVars <- function(a) {
n <- dim(a)[[1]]
c <- dim(a)[[2]]
mm <- matrix(.colMeans(a, n, c), n, c, byrow = TRUE)
return(.colMeans(((a - mm) ^ 2), n, c) * n / (n - 1))
}
## waic; from Gelman
## computes WAIC based on pointwise log-like
waic <- function(log_lik) {
S <- nrow(log_lik)
n <- ncol(log_lik)
lpd <- log(colMeans(exp(log_lik)))
p_waic <- colVars(log_lik)
elpd_waic <- lpd - p_waic
waic <- -2*elpd_waic
loo_weights_raw <- 1/exp(log_lik-max(log_lik))
loo_weights_normalized <- loo_weights_raw /
matrix(colMeans(loo_weights_raw),nrow=S,ncol=n,byrow=TRUE)
loo_weights_regularized <- pmin(loo_weights_normalized, sqrt(S))
elpd_loo <- log(colMeans(exp(log_lik)*loo_weights_regularized) /
colMeans(loo_weights_regularized))
p_loo <- lpd - elpd_loo
pointwise <- cbind(waic,lpd,p_waic,elpd_waic,p_loo,elpd_loo)
total <- colSums(pointwise)
se <- sqrt(n*colVars(pointwise))
return(list(waic=total["waic"],
elpd_waic=total["elpd_waic"],
p_waic=total["p_waic"],
elpd_loo=total["elpd_loo"],
p_loo=total["p_loo"],
pointwise=pointwise,
total=total,
se=se))
}
## ----get_user_inputs-----------------------------------------------------
## 1. file with escapement data
## [n_yrs x 2] matrix of obs counts; 1st col is calendar yr
fn_esc <- "SkagitSPCKEsc.csv"
## 2. file with age comp data
## [n_yrs x (1+A)]; 1st col is calendar yr
fn_age <- "SkagitSPCKAge.csv"
## min & max ages
age_min <- 2
age_max <- 5
## years, if any, of age-comp to skip; see below
age_skip <- 0
## 3. file with harvest data
## [n_yrs x 2] matrix of obs catch; 1st col is calendar yr
fn_harv <- "SkagitSPCKCatch.csv"
## upper threshold for Gelman & Rubin's (1992) potential scale reduction factor (Rhat).
Rhat_thresh <- 1.1
## URL for example data files
## set to NULL if using a local folder/directory
ex_url <- "https://raw.githubusercontent.com/casruff/Skagit-Chinook-run-reconstruction/master/"
## ----get_escapement_data-------------------------------------------------
dat_yrs <- seq(1986,2016,1)
## escapement
dat_esc <- read.csv(text = getURL(paste0(ex_url,fn_esc)))
dat_esc <- dat_esc[which(dat_esc$year %in% dat_yrs),]
## number of years of data
n_yrs <- length(dat_yrs)
## get first & last years
yr_frst <- min(dat_yrs)
yr_last <- max(dat_yrs)
## log of escapement
ln_dat_esc <- log(dat_esc$escapement)
## ----plot_escapement, fig.width=6, fig.height=4.5, fig.pos="placeHere"----
pDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
ypMin <- min(pDat[,1:n_yrs])
ypMax <- max(pDat[,1:n_yrs])
t_idx_T <- seq(yr_frst,length.out=n_yrs)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0.2,0.1,0.2))
plot(t_idx_T,pDat[3,1:n_yrs], ylim=c(ypMin,ypMax), type="n", log="y", xaxt="n", yaxt="n",
xlab="Year", ylab="Spawners", main="", cex.lab=1.2)
polygon(c(t_idx_T,rev(t_idx_T)),c(pDat[3,1:n_yrs],rev(pDat[1,1:n_yrs])), col=clr, border=NA)
clr <- rgb(100, 0, 200, alpha=seq(200,100,length.out=age_max-age_min), maxColorValue=255)
## ----plot_escapement, fig.width=6, fig.height=4.5, fig.pos="placeHere"----
pDat <- apply(mod_fit$BUGSoutput$sims.list$Sp,2,quantile,CI_vec)
ypMin <- min(pDat[,1:n_yrs])
ypMax <- max(pDat[,1:n_yrs])
t_idx_T <- seq(yr_frst,length.out=n_yrs)
par(mai=c(0.8,0.8,0.1,0.1), omi=c(0,0.2,0.1,0.2))
plot(t_idx_T,pDat[3,1:n_yrs], ylim=c(ypMin,ypMax), type="n", log="y", xaxt="n", yaxt="n",
xlab="Year", ylab="Spawners", main="", cex.lab=1.2)
polygon(c(t_idx_T,rev(t_idx_T)),c(pDat[3,1:n_yrs],rev(pDat[1,1:n_yrs])), col=clr, border=NA)
lines(t_idx_T, pDat[2,1:n_yrs], col="blue3", lwd=2)
points(seq(yr_frst,length.out=n_yrs), exp(ln_dat_esc), pch=16, cex=1)
