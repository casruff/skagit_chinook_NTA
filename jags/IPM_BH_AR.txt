

model {
  
  ##--------
  ## PRIORS
  ##--------
  
  ## 1. adult to smolt productivity
  pas ~ dnorm(0,0.001) T(0,);
  mu_pas <- log(pas)
  
  ## 2. smolt to fry  productivity
  psf ~ dnorm(0,0.001) T(0,);
  mu_BH_psf <- log(psf)

  ## 3. fry to adult recruit productivity
  pfa ~ dnorm(0,0.001) T(0,);
  mu_pfa <- log(pfa)
  E_pfa <- mu_pfa + sigma_r/(2 - 2*phi^2);
    

  ## strength of dens depend for smolt to fry stage
  beta_inv ~ dnorm(0, 1e-9) T(0,);
  beta <- 1/beta_inv;
  
  ## AR(1) coef for proc errors
  phi ~ dunif(-0.999,0.999);
  
  ## process variance for smolt production model
  sigma_s ~ dnorm(0, 2e-2) T(0,);
  tau_s <- 1/sigma_s;
  
  ## process variance for fry production model
  sigma_f ~ dnorm(0, 2e-2) T(0,);
  tau_f <- 1/sigma_f;

  ## process variance for adult recruits model
  sigma_r ~ dnorm(0, 2e-2) T(0,);
  tau_r <- 1/sigma_r;
  
  ## innovation in first year
  innov_1 ~ dnorm(0,tau_r*(1-phi*phi));
  
  ## obs variance for spawners
  tau_sp <- 1/sigma_sp;
  sigma_sp ~ dnorm(0, 0.001) T(0,);
  
  ## obs variance for smolts
  tau_sm <- 1/sigma_sm;
  sigma_sm ~ dnorm(0, 0.001) T(0,);
  
  ## obs variance for fry
  tau_fr <- 1/sigma_fr;
  sigma_fr ~ dnorm(0, 0.001) T(0,);
  
  
  ## unprojectable early recruits;
  ## hyper mean across all popns
  Rec_mu ~ dnorm(0,0.001);
  ## hyper SD across all popns
  Rec_sig ~ dunif(0,100);
  ## precision across all popns
  Rec_tau <- pow(Rec_sig,-2);
  ## multipliers for unobservable total runs
	ttl_run_mu ~ dunif(1,5);
	ttl_run_tau ~ dunif(1,20);

  ## get total cal yr returns for first age_min yrs
  for(i in 1:(age_min+age_skip)) {
		ln_tot_Run[i] ~ dnorm(ttl_run_mu*Rec_mu,Rec_tau/ttl_run_tau);
		tot_Run[i] <- exp(ln_tot_Run[i]);
  }
  
  ## maturity schedule
  ## unif vec for Dirch prior
  theta <- c(1,10,10,5)
  ## hyper-mean for maturity
  pi_eta ~ ddirch(theta);
  ## hyper-prec for maturity
  pi_tau ~ dnorm(0, 0.01) T(0,);
  for(t in 1:(n_yrs-age_min+n_fore)) { pi_vec[t,1:A] ~ ddirch(pi_eta*pi_tau) }
  
  ## estimated harvest rate
  for(t in 1:(n_yrs+n_fore)) { h_rate[t] ~ dunif(0,1) }

  ##------------
  ## LIKELIHOOD
  ##------------
  ## 1st brood yr requires different innovation
  ## predicted adult recruits in BY t. Modelling as density dependent
  ## relationship given that estuarine rearing stage is density dependent. 
  
  ln_pfa[1] <- mu_pfa; 
  E_ln_Rec[1] <- ln_pfa[1] + tot_ln_fry[1] + phi*innov_1; 
  tot_ln_Rec[1] ~ dnorm(E_ln_Rec[1],tau_r);
  res_ln_Rec[1] <- tot_ln_Rec[1] - E_ln_Rec[1];
  
  ## median of total recruits
  tot_Rec[1] <- exp(tot_ln_Rec[1]);
  
  ## survival = Rec/fry
  ln_RS[1] <- tot_ln_Rec[1] - tot_ln_fry[1];
  
  ## brood-yr recruits by age
  for(a in 1:A) {
    Rec[1,a] <- tot_Rec[1] * pi_vec[1,a];
  }
  
  ## brood years 2:(n_yrs-age_min)
  for(t in 2:(n_yrs-age_min+n_fore)) {
  
  ## predicted adult recruits in BY t. Modelling as density dependent relationship given that       ## estuarine rearing stage is density dependent. 
  
  ln_pfa[t] <- mu_pfa; 
  E_ln_Rec[t] <- ln_pfa[t] + tot_ln_fry[t] + phi*res_ln_Rec[t-1]; 
  tot_ln_Rec[t] ~ dnorm(E_ln_Rec[t],tau_r);
  res_ln_Rec[t] <- tot_ln_Rec[t] - E_ln_Rec[t];
  
  ## median of total recruits
  tot_Rec[t] <- exp(tot_ln_Rec[t]);
  
  ## survival = Rec/Smolt
  ln_RS[t] <- tot_ln_Rec[t] - tot_ln_fry[t];
    ## brood-yr recruits by age
    for(a in 1:A) {
      Rec[t,a] <- tot_Rec[t] * pi_vec[t,a];
    }
  } ## end t loop over year
  
  ## get predicted calendar year returns by age
  ## matrix Run has dim [(n_yrs-age_min) x A]
  ## step 1: incomplete early broods
  ## first cal yr of this grp is first brood yr + age_min + age_skip
  for(i in 1:(age_max-age_min-age_skip)) {
    ## projected recruits
    for(a in 1:(i+age_skip)) {
      Run[i,a] <- Rec[(age_skip+i)-a+1,a];
    }
    ## imputed recruits
    for(a in (i+1+age_skip):A) {
      lnRec[i,a] ~ dnorm(Rec_mu,Rec_tau);
      Run[i,a] <- exp(lnRec[i,a]);
    }
    ## total run size
    tot_Run[i+age_min+age_skip] <- sum(Run[i,1:A]);
    ## predicted age-prop vec for multinom
    for(a in 1:A) {
      age_v[i,a] <- Run[i,a] / tot_Run[i+age_min];
    }
    ## multinomial for age comp
    dat_age[i,1:A] ~ dmulti(age_v[i,1:A],dat_age[i,A+1]);
    lp_age[i] <- logdensity.multi(dat_age[i,1:A],age_v[i,1:A],dat_age[i,A+1]);
  }
  
  ## step 2: info from complete broods
  ## first cal yr of this grp is first brood yr + age_max
  for(i in (A-age_skip):(n_yrs-age_min-age_skip+n_fore)) {
    for(a in 1:A) {
      Run[i,a] <- Rec[(age_skip+i)-a+1,a];
    }
    ## total run size
    tot_Run[i+age_min+age_skip] <- sum(Run[i,1:A]);
    ## predicted age-prop vec for multinom
    for(a in 1:A) {
      age_v[i,a] <- Run[i,a] / tot_Run[i+age_min];
    }
    ## multinomial for age comp
    dat_age[i,1:A] ~ dmulti(age_v[i,1:A],dat_age[i,A+1]);
    lp_age[i] <- logdensity.multi(dat_age[i,1:A],age_v[i,1:A],dat_age[i,A+1]);
  }
  
  ## get predicted calendar year spawners and smolts
  ## first cal yr is first brood yr
  for(t in 1:(n_yrs+n_fore)) {
    ## obs model for spawners
    # Sp[t] <- max(10,tot_Run[t] - dat_harv[t]);
    est_harv[t] = h_rate[t] * tot_Run[t];
    dat_harv[t] ~ dlnorm(log(est_harv[t]), 20);
    Sp[t] = tot_Run[t] - est_harv[t];
    ln_Sp[t] <- log(Sp[t]);
    ln_dat_esc[t] ~ dnorm(ln_Sp[t], tau_sp);
    lp_esc[t] <- logdensity.norm(ln_dat_esc[t],ln_Sp[t], tau_sp);
    
    ## 1. smolt production model including process and observation error
    ln_pas[t] <- mu_pas;
    E_ln_smolt[t] <- ln_pas[t] + ln_Sp[t]; 
    tot_ln_smolt[t] ~ dnorm(E_ln_smolt[t],tau_s)
    smolt[t] <- exp(tot_ln_smolt[t])
    
    ## model residuals
    res_ln_smolt[t] <- tot_ln_smolt[t] - E_ln_smolt[t];
    

    ln_dat_smolt[t] ~ dnorm(tot_ln_smolt[t], tau_sm);
    lp_smolt[t] <- logdensity.norm(ln_dat_smolt[t],tot_ln_smolt[t], tau_sm);
    
    ## survival = smolts/spawners
    ln_ss[t] <- E_ln_smolt[t] - ln_Sp[t]
    
    ## 2. fry production model including process and observation error. Model     ##    is density dependant to account for estuarine rearing. 
    ln_BH_psf[t] <- mu_BH_psf; 
    E_ln_fry[t] <- ln_BH_psf[t] + tot_ln_smolt[t] - log(1 + beta*smolt[t]);
    tot_ln_fry[t] ~ dnorm(E_ln_fry[t],tau_f);
    ## median of fry recruits
    fry[t] <- exp(tot_ln_fry[t]);
    
    ## model residuals
    res_ln_fry[t] <- tot_ln_fry[t] - tot_ln_smolt[t];
    
    ## survival = fry/smolt
    ln_sf[t] <-  tot_ln_fry[t] - E_ln_fry[t]
    
    ln_dat_fry[t] ~ dnorm(tot_ln_fry[t], tau_sm);
    lp_fry[t] <- logdensity.norm(ln_dat_fry[t],tot_ln_fry[t], tau_fr);
    
   
  }
  
} ## end model description

